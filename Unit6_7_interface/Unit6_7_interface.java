package Unit6_7_interface;

/**
 * 接口--interface--抽象方法的集合
 * **一个类通过继承接口-->继承接口的抽象方法
 * 接口可以互相继承
 *
 * interface 名称 [extends 其它的接口名] {
 *     //声明变量
 *     //抽象方法
 * }
 * -----定义一种接口规范
 *
 * 【特点】
 * 1.JDK8以前，接口的方法都是抽象方法。默认都是 【public abstract】 （其它的会报错）
 * 2.接口里面可以定义变量，但是因为必须要被继承/实现---public static final
 * 3.和类的区别--
 *   类----描述对象的属性和方法
 *   接口--包含类要实现的方法，但接口里面的方法都是不被实现的
 *   【和类的交集】：如果类里面全是抽象方法-->可声明成接口
 *   普通类--里面的方法都会被实现
 *   接口--里面的方法不被实例化--即接口=全是抽象方法的抽象类
 * *** 接口不能被实例化，需要被实现才行。
 * 4.一个实现接口的类，必须实现接口所描述的所有方法，否则必须声明为抽象类
 *
 * 【和类的区别】
 * 1、类有构造函数，接口没有。（接口不能被实例化）
 * 2. 接口可以有 静态方法、方法体
 * 3. 接口可以多继承接口 extends A,B,C (A,B,C是interface)
 * 4. 类可以实现（不是继承）多接口 implements A,B,C
 * 即--接口是被类实现，而不是被类继承。
 * 5. 接口中所有方法必须是抽象方法（JDK8以后不是）
 *
 * 【接口的实现】
 * 1.当类implements接口的时候，类要实现 所有接口中的所有方法-->不然，必须声明为抽象类(abstract)
 *
 * class 类 implements 接口1,接口2,...{
 *     //实现方法1
 *     //实现方法2
 * }
 *
 * 2. 一个类只能extends一个类，但一个类能implements多个接口
 * 3. 接口能extends多个接口
 *
 * 【JDK8新特性】
 * 1. interface中可有static方法，但必须有方法实现体---即JDK8以后，接口中不是必须全为抽象方法。该static方法只属于接口，接口名直接调用该方法。
 * 2. 新增default方法（必须有方法体）---default方法只能定义在【接口】中，可在子类/子接口中被 重写。
 * 3. 父类的default方法如果在子类/子接口被重写-->子类/子接口实现对象，调用的是重写后的方法。
 *    如果default没被重写--调用父类定义的default()
 *
 * //static
 * Pay.staticMethod(){
 *
 * }
 *
 * //default
 * new Pay().default(){
 *
 * }
 *
 */

public class Unit6_7_interface {
}
